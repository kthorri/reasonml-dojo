// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Fetcher$MyProjectName = require("../bindings/Fetcher.bs.js");
var SimpleMap$MyProjectName = require("../bindings/SimpleMap.bs.js");

var component = ReasonReact.reducerComponent("MapWrapper");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              Fetcher$MyProjectName.fetchPost("https://immense-river-25513.herokuapp.com/add-location", "kthorri");
              Fetcher$MyProjectName.fetchPost("https://immense-river-25513.herokuapp.com/add-location", "IronPeak");
              Fetcher$MyProjectName.fetchPost("https://immense-river-25513.herokuapp.com/add-location", "Freysi21");
              return Fetcher$MyProjectName.fetchGet("https://immense-river-25513.herokuapp.com/locations", (function (data) {
                            return Curry._1(self[/* send */3], /* Fetch */[$$Array.map((function (stuff) {
                                                var match = stuff.location;
                                                return {
                                                        coordinates: /* array */[
                                                          match[1],
                                                          match[0]
                                                        ],
                                                        markerOffset: -25,
                                                        name: stuff.username
                                                      };
                                              }), data)]);
                          }));
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* markers */0].length > 0;
              if (match) {
                return React.createElement("div", undefined, ReasonReact.element(/* None */0, /* None */0, SimpleMap$MyProjectName.ComposableMap[/* make */0](1600, 900, "times", {
                                    scale: 205,
                                    rotation: /* array */[
                                      -11,
                                      0,
                                      0
                                    ]
                                  }, /* array */[ReasonReact.element(/* None */0, /* None */0, SimpleMap$MyProjectName.ZoomableGroup[/* make */0](/* array */[
                                              0,
                                              20
                                            ], false, /* array */[
                                              ReasonReact.element(/* None */0, /* None */0, SimpleMap$MyProjectName.Geographies[/* make */0](false, "../../world-50m.json", (function (geographies, projection) {
                                                          return $$Array.mapi((function (index, geography) {
                                                                        return ReasonReact.element(/* Some */[String(index)], /* None */0, SimpleMap$MyProjectName.Geography[/* make */0](geography, projection, {
                                                                                        default: {
                                                                                          outline: "none",
                                                                                          fill: "#ECEFF1",
                                                                                          stroke: "#607D8B",
                                                                                          strokeWidth: "0.75"
                                                                                        },
                                                                                        hover: {
                                                                                          outline: "none",
                                                                                          fill: "#607D8B",
                                                                                          stroke: "#607D8B",
                                                                                          strokeWidth: "0.75"
                                                                                        },
                                                                                        pressed: {
                                                                                          outline: "none",
                                                                                          fill: "#FF5722",
                                                                                          stroke: "#607D8B",
                                                                                          strokeWidth: "0.75"
                                                                                        }
                                                                                      }, /* array */[]));
                                                                      }), geographies);
                                                        }))),
                                              ReasonReact.element(/* None */0, /* None */0, SimpleMap$MyProjectName.Markers[/* make */0]($$Array.mapi((function (index, marker) {
                                                              return ReasonReact.element(/* Some */[String(index)], /* None */0, SimpleMap$MyProjectName.Marker[/* make */0](marker, false, false, {
                                                                              default: {
                                                                                fill: "#FF5722"
                                                                              },
                                                                              hover: {
                                                                                fill: "#FFFFFF"
                                                                              },
                                                                              pressed: {
                                                                                fill: "#FF5722"
                                                                              }
                                                                            }, /* array */[
                                                                              React.createElement("circle", {
                                                                                    style: {
                                                                                      opacity: "0.9",
                                                                                      stroke: "#FF5722",
                                                                                      strokeWidth: "3px"
                                                                                    },
                                                                                    cx: "0",
                                                                                    cy: "0",
                                                                                    r: "6px"
                                                                                  }),
                                                                              React.createElement("text", {
                                                                                    style: {
                                                                                      fontFamily: "Roboto, sans-serif",
                                                                                      fill: "#607D8B"
                                                                                    },
                                                                                    textAnchor: "middle",
                                                                                    y: String(marker.markerOffset)
                                                                                  }, marker.name)
                                                                            ]));
                                                            }), self[/* state */1][/* markers */0])))
                                            ]))])));
              } else {
                return React.createElement("div", undefined, "Loading");
              }
            }),
          /* initialState */(function () {
              return /* record */[/* markers : array */[]];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _) {
              return /* Update */Block.__(0, [/* record */[/* markers */action[0]]]);
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
